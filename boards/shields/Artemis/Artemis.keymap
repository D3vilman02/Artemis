#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
&lt {
    tapping-term-ms = <200>;
};
/ {
        macros {
        alts_tab: alt_shift_tab {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LSHIFT>
                , <&macro_tap &kp TAB>
                , <&macro_release &kp LSHIFT>
                ;
                };
        app_l: app_left {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LGUI>
                , <&macro_tap &kp LEFT>
                , <&macro_release &kp LGUI>
                ;
                };
        app_r: app_right {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LGUI>
                , <&macro_tap &kp RIGHT>
                , <&macro_release &kp LGUI>
                ;
                };
        n_wspc: next_workspace {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LGUI>
                , <&macro_tap &kp PG_UP>
                , <&macro_release &kp LGUI>
                ;
                };
        l_wspc: last_workspace {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LGUI>
                , <&macro_tap &kp PG_DN>
                , <&macro_release &kp LGUI>
                ;
                };
        app_lw: app_lworkspace {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LGUI &kp LSHIFT>
                , <&macro_tap &kp PG_DN>
                , <&macro_release &kp LGUI &kp LSHIFT>
                ;
                };
        app_rw: app_rworkspace {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LGUI &kp LSHIFT>
                , <&macro_tap &kp PG_UP>
                , <&macro_release &kp LGUI &kp LSHIFT>
                ;
                };        
        };
        keymap {
                compatible = "zmk,keymap";

                default_layer {
// 0-----------------------------------------------------------------------------------------
//       |  Q  |  W  |  R  |  T  |   |  T  |  Y   |  U  |  I  |
// |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |
// |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  |
//                   | GUI | LWR |   | ENT | RSE  |
                        bindings = <
                   &kp Q &kp E &kp R      &kp T       &kp RBKT    &kp U    &kp O &kp P
        &kp LALT   &kp A &kp S &kp D      &tog 4      &kp LBKT    &kp H    &kp J &kp K    &mo 5
        &kp LSHIFT &kp Z &kp X &kp C      &tog 3      &kp FSLH    &kp N    &kp M &kp SEMI &mo 4
                               &lt 1 LGUI &kp LCTRL   &lt 2 COMMA &lt 3 DOT
                        >; 
                };
                def2_layer {
// 1-----------------------------------------------------------------------------------------
// |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BSPC |
// | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
// | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
//                    | GUI |     | SPC |   | ENT |     | ALT |
                        bindings = <
                   &kp W &kp T &kp Y      &kp T       &trans       &kp Y    &kp I &kp P
        &trans     &kp F &kp G &kp H      &kp F       &trans       &kp H    &kp J &kp L    &trans
        &trans     &kp V &kp B &kp N      &kp V       &trans       &kp B    &kp M &kp SEMI &trans
                               &lt 1 LGUI &kp LCTRL   &lt 2 COMMA  &lt 3 DOT
                        >;
                };
                def3_layer {
// 2-----------------------------------------------------------------------------------------
// |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BSPC |
// | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
// | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
//                    | GUI |     | SPC |   | ENT |     | ALT |
                        bindings = <
                   &kp W &kp T &kp Y      &kp T       &kp Y       &kp Y    &kp I &kp P
        &trans     &kp F &kp G &kp H      &kp F       &kp G       &kp H    &kp J &kp L    &trans
        &trans     &kp V &kp B &kp N      &kp V       &kp B       &kp B    &kp M &kp SEMI &trans
                               &lt 1 LGUI &kp LCTRL   &lt 2 COMMA &lt 3 DOT
                        >;
                };
                nav_layer {
// 3-----------------------------------------------------------------------------------------
// |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BSPC |
// | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
// | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
//                    | GUI |     | SPC |   | ENT |     | ALT |
                        bindings = <
              &kp PG_DN  &kp UP     &kp PG_UP  &app_lw          &trans    &kp PG_UP &kp UP    &kp PG_DN  
   &trans     &kp LEFT   &kp DOWN   &kp RIGHT  &trans           &trans    &kp LEFT  &kp DOWN  &kp RIGHT &trans
   &trans     &n_wspc    &trans     &l_wspc    &trans           &trans    &kp HOME  &trans    &kp END   &trans
                                    &kp LGUI   &trans           &trans    &kp RALT
                        >;
                };
                nums_layer {
// 4---------------------------------------------------------------------------------------
// |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BSPC |
// | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
// | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
//                    | GUI |     | SPC |   | ENT |     | ALT |
                        bindings = <
              &kp KP_N7   &kp KP_N8    &kp KP_N9    &kp LNLCK       &kp KP_MULTIPLY &kp KP_N7   &kp KP_N8    &kp KP_N9   
   &trans     &kp KP_N4   &kp KP_N5    &kp KP_N6    &kp F8          &kp KP_SLASH    &kp KP_N4   &kp KP_N5    &kp KP_N6   &kp KP_MINUS
   &trans     &kp KP_N1   &kp KP_N2    &kp KP_N3    &kp F4          &kp KP_EQUAL    &kp KP_N1   &kp KP_N2    &kp KP_N3   &trans   
                                       &kp KP_N0    &trans          &kp KP_DOT      &kp KP_N0
                        >;
                };
                symbol_layer {
// 5-----------------------------------------------------------------------------------------
// |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BSPC |
// | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
// | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
//                    | GUI |     | SPC |   | ENT |     | ALT |
                        bindings = <
              &kp EQUAL   &kp EXCL &kp MINUS &kp AT            &kp TILDE  &kp PRCNT &kp UP    &kp PG_UP
   &kp APOS   &kp STAR    &kp LPAR &kp LBKT  &kp RBKT          &kp FSLH   &kp LEFT  &kp DOWN  &kp RIGHT &kp RALT
   &kp NUBS   &kp AMPS    &kp LBRC &kp NUHS  &kp CARET         &kp TILDE2 &kp COMMA &kp DOT   &kp END   &kp LSHIFT
                                   &kp PRCNT &kp FSLH          &trans     &trans
                        >;
                }; 
                numrow_layer {
// 6-----------------------------------------------------------------------------------------
// |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BSPC |
// | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
// | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
//                    | GUI |     | SPC |   | ENT |     | ALT |
                        bindings = <
              &kp F9     &kp F10  &kp F11   &kp LNLCK       &kp KP_MULTIPLY &kp KP_N7   &kp KP_N8    &kp KP_N9   
   &trans     &kp F5     &kp F6   &kp F7    &kp F8          &kp KP_SLASH    &kp KP_N4   &kp KP_N5    &kp KP_N6   &kp KP_MINUS
   &trans     &kp F1     &kp F2   &kp F3    &kp F4          &kp KP_EQUAL    &kp KP_N1   &kp KP_N2    &kp KP_N3   &kp KP_PLUS   
                                  &kp LGUI  &trans          &kp LT    &kp GT
                        >;
                };
                gaming_layer {
// 7---------------------------------------------------------------------------------------
// |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BSPC |
// | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
// | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
//                    | GUI |     | SPC |   | ENT |     | ALT |
                        bindings = <
                   &kp Q &kp W &kp R      &kp T       &kp Y       &kp U    &kp O &kp P
        &kp E      &kp A &kp S &kp D      &kp F       &kp G       &kp H    &kp I &kp J    &kp L
        &kp LSHIFT &kp Z &kp X &kp C      &kp V       &kp B       &kp N    &kp M &kp SEMI &kp K
                               &kp LALT   &kp SPACE   &kp KP_DOT  &kp KP_N0
                        >;
                };
                bt_layer {
// 8---------------------------------------------------------------------------------------
// |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BSPC |
// | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
// | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
//                    | GUI |     | SPC |   | ENT |     | ALT |
                        bindings = <
                   &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2    &kp T       &kp Y       &kp U    &kp O &kp P
        &kp E      &bt BT_SEL 3 &bt BT_SEL 4 &kp D           &kp F       &kp G       &kp H    &kp I &kp J    &kp L
        &bt BT_CLR &kp Z        &kp X        &kp C           &kp V       &kp B       &kp N    &kp M &kp SEMI &kp K
                                &kp LALT     &kp SPACE       &kp KP_DOT  &kp KP_N0
                        >;
                };
 
        combos {
        compatible = "zmk,combos";
        combo_def3 {
            timeout-ms = <50>;
            key-positions = <18 29>;
            bindings = <&mo 2>;
            layers = <0 1>;
        };
        combo_tab {
            timeout-ms = <50>;
            key-positions = <0 1>;
            bindings = <&kp TAB>;
            layers = <0 1>;
        };
        combo_enter {
            timeout-ms = <50>;
            key-positions = <14 15 16>;
            bindings = <&kp RET>;
        };
        combo_bcspace {
            timeout-ms = <50>;
            key-positions = <15 16>;
            bindings = <&kp BSPC>;
        };
        combo_esc {
            timeout-ms = <50>;
            key-positions = <0 2>;
            bindings = <&kp ESC>;
            layers = <0 1>;
        };
        combo_space {
            timeout-ms = <50>;
            key-positions = <14 15>;
            bindings = <&kp SPACE>;
        };
        combo_volup {
            timeout-ms = <50>;
            key-positions = <6 7>;
            bindings = <&kp K_VOL_UP>;
            layers = <0 1>;
        };
        combo_voldown {
            timeout-ms = <50>;
            key-positions = <5 6>;
            bindings = <&kp K_VOL_DN>;
        };
        combo_play_pause {
            timeout-ms = <50>;
            key-positions = <5 6 7>;
            bindings = <&kp K_PP>;
        };
        combo_next {
            timeout-ms = <50>;
            key-positions = <5 7>;
            bindings = <&kp K_NEXT>;
        };
        combo_prev {
            timeout-ms = <50>;
            key-positions = <4 7>;
            bindings = <&kp K_PREV>;
        };
        combo_bright_up {
            timeout-ms = <50>;
            key-positions = <2 3>;
            bindings = <&kp C_BRI_UP>;
            layers = <0 1>;
        };
        combo_bright_down {
            timeout-ms = <50>;
            key-positions = <1 3>;
            bindings = <&kp C_BRI_DN>;
            layers = <0 1>;
        };
        combo_layer2 {
            timeout-ms = <50>;
            key-positions = <10 11>;
            bindings = <&tog 1>;
            layers = <0 1>;
        };
        combo_layer4 {
            timeout-ms = <50>;
            key-positions = <9 10 11>;
            bindings = <&tog 3>;
            layers = <0 3>;
        };
        combo_supr {
            timeout-ms = <50>;
            key-positions = <15 16 17>;
            bindings = <&kp DEL>;
        };
        combo_ss {
            timeout-ms = <50>;
            key-positions = <13 17>;
            bindings = <&kp PSCRN>;
        };
        combo_ralt {
            timeout-ms = <50>;
            key-positions = <18 29>;
            bindings = <&kp RALT>;
            layers = <0 1>;
        };
        combo_lalt {
            timeout-ms = <50>;
            key-positions = <18 28>;
            bindings = <&kp LALT>;
            layers = <0 1>;
        };
        combo_layer5 {
            timeout-ms = <50>;
            key-positions = <8 17>;
            bindings = <&tog 5>;
            layers = <0 5>;
        };
        combo_btlayer {
            timeout-ms = <50>;
            key-positions = <29 30>;
            bindings = <&tog 6>;
            layers = <0 6>;
        };
    };
};
};
//        | SW0  | SW1  | SW2  | SW3  |   | SW4  | SW5  | SW6  | SW7  |
// | SW8  | SW9  | SW10 | SW11 | SW12 |   | SW13 | SW14 | SW15 | SW16 | SW17 |
// | SW18 | SW19 | SW20 | SW21 | SW22 |   | SW23 | SW24 | SW25 | SW26 | SW27 |
//                      | SW28 | SW29 |   | SW30 | SW31 |